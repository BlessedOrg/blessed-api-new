// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Developer {
  id                     String             @id @default(cuid())
  email                  String?            @unique
  connectedWalletAddress String?            @unique
  walletAddress          String?            @unique
  smartWalletAddress     String?            @unique
  accessTokenVaultKey    String?
  capsuleTokenVaultKey   String?
  avatarUrl              String?
  role                   Role               @default(USER)
  Apps                   App[]
  Tickets                Ticket[]
  Sessions               DeveloperSession[]
  Interactions           Interaction[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
}

enum Role {
  ADMIN
  USER
}

model App {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String        @unique
  description  String?
  imageUrl     String?
  domainUrl    String?
  colors       Json?
  Tickets      Ticket[]
  Developer    Developer     @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId  String
  Users        User[]
  ApiTokens    ApiToken[]
  Events       Event[]
  Campaigns    Campaign[]
  Audiences    Audience[]
  Stakeholders Stakeholder[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  walletAddress        String?        @unique
  smartWalletAddress   String?        @unique
  capsuleTokenVaultKey String?
  avatarUrl            String?
  Sessions             UserSession[]
  Interactions         Interaction[]
  Apps                 App[]
  Orders               Order[]
  AudienceUsers        AudienceUser[]
  EventBouncers        EventBouncer[]
  Stakeholders         Stakeholder[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model ApiToken {
  id               String    @id @default(cuid())
  apiTokenVaultKey String
  App              App       @relation(fields: [appId], references: [id])
  appId            String
  revoked          Boolean   @default(false)
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model UserSession {
  id           String   @id @default(cuid())
  accessToken  String   @unique
  refreshToken String   @unique
  appId        String
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DeveloperSession {
  id          String     @id @default(cuid())
  Developer   Developer? @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String?
  expiresAt   DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 String         @id @default(cuid())
  name               String
  slug               String         @unique
  description        String?
  address            String         @unique
  logoUrl            String?
  metadataUrl        String?
  metadataPayload    Json
  timezoneIdentifier String?
  startsAt           DateTime?
  endsAt             DateTime?
  App                App            @relation(fields: [appId], references: [id])
  appId              String
  EventLocation      EventLocation?
  EventKey           EventKey?
  Interactions       Interaction[]
  Tickets            Ticket[]
  EventBouncers      EventBouncer[]
  Stakeholders       Stakeholder[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
}

model EventKey {
  id        String   @id @default(cuid())
  key       String
  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventBouncer {
  id        String    @id @default(cuid())
  User      User      @relation(fields: [userId], references: [id])
  userId    String
  Event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  isActive  Boolean   @default(true)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model EventLocation {
  id               String   @id @default(cuid())
  Event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String   @unique
  street1stLine    String?
  street2ndLine    String?
  postalCode       String?
  city             String
  countryCode      String?
  country          String
  locationDetails  String?
  continent        String?
  stateCode        String?
  countryLatitude  String?
  countryLongitude String?
  cityLatitude     String?
  cityLongitude    String?
  countryFlag      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Stakeholder {
  id             String          @id @default(cuid())
  walletAddress  String
  User           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  feePercentage  Int
  App            App             @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId          String
  Event          Event?          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String?
  Ticket         Ticket?         @relation(fields: [ticketId], references: [id], onDelete: NoAction)
  ticketId       String?
  paymentMethods PaymentMethod[] @default([])
  notifiedAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
}

model Campaign {
  id                   String                @id @default(cuid())
  name                 String
  slug                 String
  Audiences            Audience[]
  CampaignDistribution CampaignDistribution?
  Tickets              Ticket[]
  App                  App                   @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId                String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  deletedAt            DateTime?
}

model CampaignDistribution {
  id            String         @id @default(cuid())
  Campaign      Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId    String         @unique
  AudienceUsers AudienceUser[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model Audience {
  id            String         @id @default(cuid())
  name          String
  slug          String
  Campaigns     Campaign[]
  AudienceUsers AudienceUser[]
  App           App            @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId         String
  public        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  deletedAt     DateTime?
}

model AudienceUser {
  id                    String                 @id @default(cuid())
  Audiences             Audience[]
  CampaignDistributions CampaignDistribution[]
  User                  User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String?                @unique
  externalWalletAddress String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  deletedAt             DateTime?
}

model Ticket {
  id              String          @id @default(cuid())
  name            String
  slug            String
  address         String          @unique
  logoUrl         String?
  metadataUrl     String?
  metadataPayload Json
  Developer       Developer?      @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId     String?
  App             App             @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId           String
  Event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  paymentMethods  PaymentMethod[] @default([])
  Orders          Order[]
  Interactions    Interaction[]
  Campaigns       Campaign[]
  Stakeholders    Stakeholder[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  @@unique([slug, eventId])
}

enum PaymentMethod {
  CRYPTO
  FIAT
}

model Interaction {
  id           String                    @id @default(cuid())
  Developer    Developer?                @relation(fields: [developerId], references: [id], onDelete: SetNull)
  developerId  String?
  User         User?                     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  Ticket       Ticket?                   @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  ticketId     String?
  Event        Event?                    @relation(fields: [eventId], references: [id], onDelete: SetNull)
  eventId      String?
  method       String?
  txHash       String?
  output       Json?
  input        Json?
  gasWeiPrice  String?
  gasUsdPrice  String?
  value        String?
  currency     String?
  operatorType SmartContractOperatorType
  type         InteractionType           @default(EXPENSE)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  deletedAt    DateTime?
}

enum InteractionType {
  INCOME
  EXPENSE
}

enum SmartContractOperatorType {
  biconomy
  operator
  irys
}

model Order {
  id         String      @id @default(cuid())
  providerId String
  User       User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId     String
  Ticket     Ticket      @relation(fields: [ticketId], references: [id], onDelete: NoAction)
  ticketId   String
  quantity   Float
  priceCents Int
  failReason String?
  status     OrderStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  FAILED
  COMPLETED
}
