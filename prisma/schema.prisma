// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeveloperAccount {
  id                   String             @id @default(cuid())
  email                String             @unique
  walletAddress        String?            @unique
  smartWalletAddress   String?            @unique
  accessTokenVaultKey  String?
  capsuleTokenVaultKey String?
  Tickets              Ticket[]
  Apps                 App[]
  Sessions             DeveloperSession[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model App {
  id               String           @id @default(cuid())
  slug             String           @unique
  name             String           @unique
  description      String?
  imageUrl         String?
  domainUrl        String?
  Tickets          Ticket[]
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  Users            User[]
  ApiTokens        ApiToken[]
  Events           Event[]
  Campaigns        Campaign[]
  Audiences        Audience[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  walletAddress        String?               @unique
  smartWalletAddress   String?               @unique
  capsuleTokenVaultKey String?
  Sessions             UserSession[]
  TicketInteractions   TicketInteraction[]
  EntranceInteractions EntranceInteraction[]
  Apps                 App[]
  Orders               Order[]
  AudienceUsers        AudienceUser[]
  EventsBouncer        EventBouncer[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model ApiToken {
  id               String    @id @default(cuid())
  apiTokenVaultKey String
  App              App       @relation(fields: [appId], references: [id])
  appId            String
  revoked          Boolean   @default(false)
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model UserSession {
  id           String   @id @default(cuid())
  accessToken  String   @unique
  refreshToken String   @unique
  appId        String
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DeveloperSession {
  id               String            @id @default(cuid())
  DeveloperAccount DeveloperAccount? @relation(fields: [developerId], references: [id])
  developerId      String?
  expiresAt        DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  contractAddress    String         @unique
  logoUrl            String?
  slug               String         @unique
  timezoneIdentifier String?
  startsAt           DateTime?
  endsAt             DateTime?
  App                App            @relation(fields: [appId], references: [id])
  appId              String
  EventLocation      EventLocation?
  EventKey           EventKey?
  Tickets            Ticket[]
  Entrances          Entrance[]
  EventBouncers      EventBouncer[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
}

model EventKey {
  id        String   @id @default(cuid())
  key       String
  Event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventBouncer {
  id        String    @id @default(cuid())
  User      User      @relation(fields: [userId], references: [id])
  userId    String
  Event     Event     @relation(fields: [eventId], references: [id])
  eventId   String
  isActive  Boolean   @default(true)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model EventLocation {
  id               String   @id @default(cuid())
  Event            Event    @relation(fields: [eventId], references: [id])
  eventId          String   @unique
  street1stLine    String?
  street2ndLine    String?
  postalCode       String?
  city             String
  countryCode      String?
  country          String
  locationDetails  String?
  continent        String?
  stateCode        String?
  countryLatitude  String?
  countryLongitude String?
  cityLatitude     String?
  cityLongitude    String?
  countryFlag      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Campaign {
  id                   String                @id @default(cuid())
  name                 String
  slug                 String
  Audiences            Audience[]
  CampaignDistribution CampaignDistribution?
  Tickets              Ticket[]
  App                  App                   @relation(fields: [appId], references: [id])
  appId                String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?             @updatedAt
  deletedAt            DateTime?
}

model CampaignDistribution {
  id            String         @id @default(cuid())
  Campaign      Campaign       @relation(fields: [campaignId], references: [id])
  campaignId    String         @unique
  AudienceUsers AudienceUser[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Audience {
  id            String         @id @default(cuid())
  name          String
  slug          String
  Campaigns     Campaign[]
  AudienceUsers AudienceUser[]
  App           App            @relation(fields: [appId], references: [id])
  appId         String
  public        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  deletedAt     DateTime?
}

model AudienceUser {
  id                    String                 @id @default(cuid())
  Audiences             Audience[]
  CampaignDistributions CampaignDistribution[]
  User                  User?                  @relation(fields: [userId], references: [id])
  userId                String?                @unique
  externalWalletAddress String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  deletedAt             DateTime?
}

model Ticket {
  id                 String              @id @default(cuid())
  address            String              @unique
  name               String
  slug               String
  DevelopersAccount  DeveloperAccount?   @relation(fields: [developerId], references: [id])
  developerId        String?
  metadataUrl        String?
  metadataPayload    Json
  App                App                 @relation(fields: [appId], references: [id])
  appId              String
  Event              Event               @relation(fields: [eventId], references: [id])
  eventId            String
  Orders             Order[]
  TicketInteractions TicketInteraction[]
  Entrance           Entrance?
  entranceId         String?             @unique
  Campaigns          Campaign[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([slug, eventId])
}

model Entrance {
  id                  String                @id @default(cuid())
  address             String                @unique
  metadataUrl         String?
  metadataPayload     Json
  Event               Event                 @relation(fields: [eventId], references: [id])
  eventId             String
  Ticket              Ticket?               @relation(fields: [ticketId], references: [id])
  ticketId            String?               @unique
  EntranceInteraction EntranceInteraction[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@unique([ticketId, eventId])
}

model TicketInteraction {
  id        String                       @id @default(cuid())
  User      User                         @relation(fields: [userId], references: [id])
  userId    String
  Ticket    Ticket                       @relation(fields: [ticketId], references: [id])
  ticketId  String
  method    String
  txHash    String
  output    Json?
  input     Json?
  fees      String?
  type      SmartContractInteractionType
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model EntranceInteraction {
  id         String                       @id @default(cuid())
  User       User                         @relation(fields: [userId], references: [id])
  userId     String
  Entrance   Entrance                     @relation(fields: [entranceId], references: [id])
  entranceId String
  method     String
  txHash     String
  output     Json?
  input      Json?
  fees       String?
  type       SmartContractInteractionType
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt
}

enum SmartContractInteractionType {
  gasless
  operator
  wallet
}

model Order {
  id         String      @id @default(cuid())
  providerId String
  User       User        @relation(fields: [userId], references: [id])
  userId     String
  Ticket     Ticket      @relation(fields: [ticketId], references: [id])
  ticketId   String
  quantity   Float
  priceCents Int
  failReason String?
  status     OrderStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  FAILED
  COMPLETED
}
